scale = "cont", col.rev=T)
source("J:/WORK/05_risk/central/code/maps/global_map.R")
library(data.table)
library(ggplot2)
library(RMySQL)
library(maptools)
library(gridExtra)
global_map(data=out, map.var="predict_pm", plot.title="HAP Exposure with New Measurement Standard",
output.path=out_path, years=years, col="easter_to_earth", ages = 22, sexes=3, subnat=TRUE,
scale = "cont", col.rev=T)
View(loc_id_dt)
out <- merge(out, loc_id_dt, by= "location_id", all.x=T)
global_map(data=out, map.var="predict_pm", plot.title="HAP Exposure with New Measurement Standard",
output.path=out_path, years=years, col="easter_to_earth", ages = 22, sexes=3, subnat=TRUE,
scale = "cont", col.rev=T)
write.csv(out, file = paste0(out_root, "lm_map", date,  ".csv"), row.names = F)
draws.required <- 1000
draw.colnames <- c(paste0("draw_", 1:draws.required))
out[, index := seq_len(.N)]
out[, draw.colnames := rnorm(draws.required, mean=mean, sd=standard_error) %>%
exp %>%
as.list,
by="index", with=F]
write.csv(out, file = paste0(dat_root, "lm_pred_", date, ".csv"), row.names = F)
write.csv(out, file = paste0(out_root, "lm_pred_", date, ".csv"), row.names = F)
library(data.table)
dt<-fread(""J:/temp/wgodwin/HAP_data_sources.csv"")
dt<-fread("J:/temp/wgodwin/HAP_data_sources.csv")
head(dt)
if (Sys.info()["sysname"] == "Linux") {
j_root <- "/home/j"
h_root <- "/homes/wgodwin"
} else {
j_root <- "J:"
h_root <- "H:"
}
# Set formatting objects
date <- format(Sys.Date(), "%m%d%y")
in_root <- "J:/WORK/05_risk/risks/air_hap/02_rr/02_output/01_pm_mapping/lit_db/lm_input/"
out_root <- "J:/WORK/05_risk/risks/air_hap/02_rr/02_output/01_pm_mapping/lit_db/lm_output/"
# Package Setup
library(data.table)
library(DT)
library(plyr)
library(knitr)
library(MuMIn)
library(lme4)
library(nlme)
library(arm)
library(RLRsim)
library(magrittr)
library(ggplot2)
LocationHier <- fread(paste0(in_root, "loc_hierarchy.csv"))
dt <- merge(dt,LocationHier, by=c("location_id","super_region_id","region_id",
"ihme_loc_id"))
rm(list=ls())
# runtime configuration
if (Sys.info()["sysname"] == "Linux") {
j_root <- "/home/j"
h_root <- "/homes/wgodwin"
} else {
j_root <- "J:"
h_root <- "H:"
}
# Set formatting objects
date <- format(Sys.Date(), "%m%d%y")
in_root <- "J:/WORK/05_risk/risks/air_hap/02_rr/02_output/01_pm_mapping/lit_db/lm_input/"
out_root <- "J:/WORK/05_risk/risks/air_hap/02_rr/02_output/01_pm_mapping/lit_db/lm_output/"
# Package Setup
library(data.table)
library(DT)
library(plyr)
library(knitr)
library(MuMIn)
library(lme4)
library(nlme)
library(arm)
library(RLRsim)
library(magrittr)
library(ggplot2)
#Prep square for predicting out later
ubcov.function.dir <- file.path(j_root, 'WORK/01_covariates/common/ubcov_central/functions')
source(file.path(ubcov.function.dir, "utilitybelt/db_tools.r"))
square <- make_square(149,
1990, 2016,
0, 0,
covariates="sdi")
#Import updated dataset
dt <- fread(paste0(in_root, "lmer_input_04202017_india.csv"))
dt[, COuntry := substr(ihme_loc_id,1,3)]
dt[, log_pm := log(pm_mean)]
#convert stove type from wide to long
dt <- reshape(dt,
varying = c("traditional", "ics", "gasstove"),
v.names = "stove_yes",
timevar = "stovetype",
times = c("traditional", "ics", "gasstove"),
direction = "long")
dt <- dt[stove_yes==1]
dt <- reshape(dt,
varying = c("wood", "gas","kerosene","dung","coal","charcoal","crop_residue","biomass"),
v.names = "fuel_yes",
timevar = "fueltype",
times = c("wood", "gas","kerosene","dung","coal","charcoal","crop_residue","biomass"),
new.row.names=1:(8*nrow(dt)),
direction = "long")
dt <- dt[fuel_yes==1]
#Merge on location hierarchy
LocationHier <- fread(paste0(in_root, "loc_hierarchy.csv"))
dt <- merge(dt,LocationHier, by=c("location_id","super_region_id","region_id",
"ihme_loc_id"))
#Make some necessary exclusions
#dt <- dt[kit==1 & personal_exp==0 & fueltype!="charcoal"]
dt <- dt[fueltype!="charcoal"]
dt[, fueltype := as.factor(fueltype)]
dt[, fueltype := relevel(fueltype, ref='gas')]
dt <- dt[title != "Relationship between pulmonary function and indoor air pollution from coal combustion among adult residents in an inner-city area of southwest China"]
dt <- dt[title != "Indoor Air Pollution and Respiratory Illness in Children from Rural India: A Pilot Study"]
head(dt)
vars <- c("title", "location_name", "ihme_loc_id", "year_id")
dt2 <-dt[, vars]
dt2 <-dt[, vars, with=F]
head(dt2)
unique(dt$ihme_loc_id)
dt2[grepl("CHN", ihme_loc_id)]
dt2[grepl("CHN", ihme_loc_id), mean(year_id)]
chn<-dt2[grepl("CHN", ihme_loc_id)]
head(chn)
chn[unique(title)]
setkey(chn, title)
chn[unique(title)]
chn[unique(title),]
chn[,unique(title)]
chn_titles <- chn[,unique(title)]
chn_titles <- chn[year_id,unique(title)]
read.csv(chn, "J:/temp/wgodwin/chn_hap")
read.csv(chn, "J:/temp/wgodwin/chn_hap.csv")
read.csv(chn, "J:/temp/wgodwin/chn_hap.csv", with = F)
read.csv(chn, file="J:/temp/wgodwin/chn_hap.csv", with = F)
read.csv(chn, file="J:/temp/wgodwin/chn_hap.csv")
View(chn)
read.csv(chn, file="J:/temp/wgodwin/chn_hap.csv")
write.csv(chn, file="J:/temp/wgodwin/chn_hap.csv")
head(dt)
dt <- fread(paste0(in_root, "lmer_input_04202017_india.csv"))
#Format and log transform
#dt <- dt[measure_std==1 & mean_geom==0 & !(is.na(pm_mean))]
#dt <- dt[mean_geom==0 & !(is.na(pm_mean))]
dt[, COuntry := substr(ihme_loc_id,1,3)]
dt[, log_pm := log(pm_mean)]
#convert stove type from wide to long
dt <- reshape(dt,
varying = c("traditional", "ics", "gasstove"),
v.names = "stove_yes",
timevar = "stovetype",
times = c("traditional", "ics", "gasstove"),
direction = "long")
dt <- dt[stove_yes==1]
dt <- reshape(dt,
varying = c("wood", "gas","kerosene","dung","coal","charcoal","crop_residue","biomass"),
v.names = "fuel_yes",
timevar = "fueltype",
times = c("wood", "gas","kerosene","dung","coal","charcoal","crop_residue","biomass"),
new.row.names=1:(8*nrow(dt)),
direction = "long")
dt <- dt[fuel_yes==1]
#Merge on location hierarchy
LocationHier <- fread(paste0(in_root, "loc_hierarchy.csv"))
dt <- merge(dt,LocationHier, by=c("location_id","super_region_id","region_id",
"ihme_loc_id"))
#Make some necessary exclusions
#dt <- dt[kit==1 & personal_exp==0 & fueltype!="charcoal"]
dt <- dt[fueltype!="charcoal"]
dt[, fueltype := as.factor(fueltype)]
dt[, fueltype := relevel(fueltype, ref='gas')]
dt <- dt[title == "Relationship between pulmonary function and indoor air pollution from coal combustion among adult residents in an inner-city area of southwest China"]
View(dt)
rm(list=ls())
tu <- expand.grid(Land       = gl(2, 1, labels = c("DE", "BB")),
Altersgr   = gl(5, 1, labels = letters[1:5]),
Geschlecht = gl(2, 1, labels = c('m', 'w')),
Jahr       = 2000:2009)
View(tu)
tu$Wert <- unclass(tu$Altersgr) * 200 + rnorm(200, 0, 10)
class(tu$Wert)
class(tu$Altersgr)
class(tu$jahr)
class(tu$Jahr)
class(tu$Wert)
class(tu$Altersgr)
library(data.table)
dt <- fread(""J:/WORK/05_risk/mediation/mediation_matrix_draw.csv"")
dt <- fread("J:/WORK/05_risk/mediation/mediation_matrix_draw.csv")
names(dt)
View(dt)
meddf <- copy(dt)
meddf2 <- meddf[, grep("draw", names(meddf), value = TRUE) := .(rep(NULL, 1000))][!is.na(mean),]
View(meddf2)
rowSums(is.na(meddf2))
length(meddf2)
?setdiff
data <- data.frame(id=c('a', 'b', 'a', 'c', 'a'))
data
data <- data.frame(year_id = c(1990, 2016, 1990, 2016), rei_id = c("water", "water", "hap","hap"))
data
year <- seq(1990,2016)
year
merge <- merge(data, year, all = T)
merge
merge <- merge(data, year, by = "year_id", all = T)
library(data.table)
data<-fread("J:/temp/wgodwin/chn.csv")
data<-fread("J:/temp/wgodwin/chn.csv")
data<-fread("J:/temp/wgodwin/chn.csv")
View(data)
View(data)vetor <- c(1,2,3)
key <- data.frame(vetor=vetor, mat=c('a', 'b', 'c'))
data <- data.frame(id=c('a', 'b', 'a', 'c', 'a'))
data$vector1 <- key[match(data$id, key$mat), 'vetor']
vetor <- c(1,2,3)
key <- data.frame(vetor=vetor, mat=c('a', 'b', 'c'))
View(key)
data<-fread("J:/temp/wgodwin/chn.csv")
year <- data.frame(year_id = seq(1990,2016))
year
mer <- merge(data, year, by = year_id)
mer <- merge(data, year, by = "year_id")
mer
mer <- merge(data, year, by = "year_id", all = T)
mer
hospital_names <- c(
`Hospital#1` = "Some Hospital",
`Hospital#2` = "Another Hospital",
`Hospital#3` = "Hospital Number 3",
`Hospital#4` = "The Other Hospital"
)
hospital_names
rm(list=ls())
windows <- Sys.info()[1]=="Windows"
root <- ifelse(windows,"J:/","/home/j/")
user <- ifelse(windows, Sys.getenv("USERNAME"), Sys.getenv("USER"))
code.dir <- paste0(ifelse(windows, "H:", paste0("/homes/", user)), "/risk_factors/")
library(data.table)
library(ggplot2)
library(RMySQL)
library(maptools)
library(gridExtra)
library(ggrepel)
source(paste0(root, "temp/central_comp/libraries/current/r/get_covariate_estimates.R"))
sdi.table <- get_covariate_estimates(covariate_name_short = "sdi")
head(sdi.table)
sdi<- sdi.table[, .(covariate_name_short, location_name, year_id, mean_value, lower_value, upper_value)]
head(sdi)
sdi<- sdi.table[, .(covariate_name_short, location_name, year_id, mean_value)]
head(sdi)
write.csv(sdi, "C:/Users/wgodwin/Desktop/sdi.csv", row.names = F)
ptdat <- as.data.frame(ptdat)
# Diagnostics for WaSH exposure data
library(data.table)
#Set root for windows or cluster
root <- ifelse(Sys.info()[1]=="Windows", "J:/", "/snfs1/")
piped_old <- fread(paste0(root, "temp/wgodwin/gpr_input/run1/wash_water_piped3.csv"))
piped_noimp <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26_noimput_cw.csv"))
piped_noimp_cw <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26_noimput_nocw.csv"))
piped <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26.csv"))
head(piped_old)
head(piped)
piped_noimp[, piped := piped_noimp_var]
piped_noimp[, piped_noimp_var := piped]
piped_noimp
setnames(piped_noimp, "piped", "piped_noimp_var")
piped_noimp
piped <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26.csv"))
piped_noimp <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26_noimput_cw.csv"))
piped_noimp_cw <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26_noimput_nocw.csv"))
#Pull in GBD 2015 to compare
piped_old <- fread(paste0(root, "temp/wgodwin/gpr_input/run1/wash_water_piped3.csv"))
#Merge together files in prep for visualizing
setnames(piped_noimp, "piped", "piped_noimp_var")
piped_noimp
comp_imp_dt <- merge(piped, piped_noimp, by = nid)
comp_imp_dt <- merge(piped, piped_noimp, by = "nid")
View(comp_imp_dt)
View(piped)
comp_imp_dt <- merge(piped, piped_noimp, by = "nid", all = F)
piped <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26.csv"))
piped <- piped[,.(nid, iso3, survey_series, year_start, piped, se_piped)]
piped <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26.csv"))
piped <- piped[,.(nid, iso3, survey_series, year_start, piped, se_piped)]
piped_noimp <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26_noimput_cw.csv"))
piped_noimp_cw <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26_noimput_nocw.csv"))
#Pull in GBD 2015 to compare
piped_old <- fread(paste0(root, "temp/wgodwin/gpr_input/run1/wash_water_piped3.csv"))
#Merge together files in prep for visualizing
setnames(piped_noimp, c("piped", "se_piped"), c("piped_noimp_var", "se_noimp_var"))
comp_imp_dt <- merge(piped, piped_noimp, by = c("nid", "year_start", "iso3", "survey_series"), all = F)
head(comp_imp_dt)
# Clear environment
rm(list = ls())
# Diagnostics for WaSH exposure data
library(data.table)
#Set root for windows or cluster
root <- ifelse(Sys.info()[1]=="Windows", "J:/", "/snfs1/")
#Pull in pt and poly data
piped <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26.csv"))
piped <- piped[,.(nid, iso3, survey_series, year_start, piped, se_piped)]
piped_noimp <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26_noimput_cw.csv"))
piped_noimp <- piped_noimp[,.(nid, iso3, survey_series, year_start, piped, se_piped)]
piped_noimp_cw <- fread(paste0(root, "WORK/05_risk/risks/wash_water/data/exp/01_data_audit/tabulated_2017_09_26_noimput_nocw.csv"))
#Pull in GBD 2015 to compare
piped_old <- fread(paste0(root, "temp/wgodwin/gpr_input/run1/wash_water_piped3.csv"))
#Merge together files in prep for visualizing
setnames(piped_noimp, c("piped", "se_piped"), c("piped_noimp_var", "se_noimp_var"))
comp_imp_dt <- merge(piped, piped_noimp, by = c("nid", "year_start", "iso3", "survey_series"), all = F)
head(comp_imp_dt)
plot(comp_imp_dt$piped, comp_imp_dt$piped_noimp_var)
plot(comp_imp_dt$se_piped, comp_imp_dt$se_noimp_var)
setnames(piped_noimp_cw, c("piped", "se_piped"), c("piped_noimp_var", "se_noimp_var"))
comp_imp_cw_dt <- merge(piped, piped_noimp_cw, by = c("nid", "year_start", "iso3", "survey_series"), all = F)
plot(comp_imp_cw_dt$piped, comp_imp_cw_dt$piped_noimp_var)
rm(list = ls())
# Define indicator family; can be water, sani, or hw
indi_fam <- "water"
# Define agg level; can be country or '' [use '' for default]
agg_level <- 'country'
# Define indicator era
sdg <- F
# define process
windows <- Sys.info()[1]=="Windows"
user <- ifelse(windows, Sys.getenv("USERNAME"), Sys.getenv("USER"))
project <- ifelse(user == "wgodwin", "gbd", "geo")
# Set repo path
root <- ifelse(Sys.info()[1]=="Windows", "J:/", "/snfs1/")
if(project == "gbd") repo <- ifelse(Sys.info()[1]=="Windows", 'H:/wash_mapping/01_collapse/',
'/snfs2/HOME/wgodwin/wash_mapping/01_collapse/')
#'/share/code/geospatial/adesh/wash_mapping/01_collapse/')
# Load Packages
# Set package library
#if(Sys.info()[1]!="Windows") {
#package_lib <- paste0(root,'temp/geospatial/packages')
#.libPaths(package_lib)
#}
# Detach all but base packages
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices",
"package:utils","package:datasets","package:methods",
"package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list)
detach(package, character.only=TRUE)
}
detachAllPackages()
# Load and install, if necessary, needed packages
packages <- c('data.table', 'haven', 'survey', 'reshape2', 'dplyr')
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(packages, library, character.only = T)
#for (data_type in c("pt", "poly")){
# Load data
data_type <- "pt"
if (!("pt_collapse" %in% ls()) & data_type == 'pt') {
name <- load(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/points_2017_09_06.Rdata'))
Encoding(pt_collapse$w_source_drink) <- "windows-1252"
Encoding(pt_collapse$w_source_other) <- "windows-1252"
Encoding(pt_collapse$t_type) <- "windows-1252"
pt_collapse <- get(name)
}
if (!("poly_collapse" %in% ls()) & data_type == 'poly') {
name <- load(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/poly_2017_09_05.Rdata'))
Encoding(poly_collapse$w_source_drink) <- "windows-1252"
Encoding(poly_collapse$w_source_other) <- "windows-1252"
Encoding(poly_collapse$t_type) <- "windows-1252"
pt_collapse <- get(name)
rm(poly_collapse)
}
if (!("definitions" %in% ls())) {
if (indi_fam == "sani") {
definitions <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/t_type_defined_updated_2017_09_07.csv'),
encoding="windows-1252", stringsAsFactors = F)
} else {
definitions <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/w_source_defined_updated_2017_09_07.csv'),
encoding="windows-1252", stringsAsFactors = F)
definitions2 <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/w_other_defined_updated_2017_09_07.csv'),
encoding="windows-1252", stringsAsFactors = F)
definitions2 <- rename(definitions2, sdg2 = sdg)
}
}
definitions <- distinct(definitions)
if (exists('definitions2')) {definitions2 <- distinct(definitions2)}
rm(list = setdiff(ls(),c('definitions','pt_collapse','definitions2','indi_fam','repo','data_type','root','agg_level', 'sdg', 'project')))
#### Load functions ####
setwd(repo)
source('functions/hh_cw.R')
source('functions/address_missing.R')
source('functions/cw_indi.R')
source('functions/agg_wash.R')
source('functions/define_wash.R')
source('functions/collapse_gbd.R')
#### Subset & Shape Data ####
# Subset to relevant variables
if(project == "gbd"){
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, strata, psu, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other,
hh_size, year_start,hhweight,shapefile,location_code)
} else {
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other,
hh_size, year_start,hhweight,shapefile,location_code)
}
problem_list <- filter(ptdat_0, hh_size <= 0)
#setwd('C:/Users/adesh/Desktop')
#write.csv(problem_list %>% group_by(nid, iso3, survey_series, year_start) %>% summarize(obs = n(), min_hhs = min(hh_size)),
#          file = paste0(data_type,"_problems.csv"))
setwd(repo)
# Create a unique cluster id
if (data_type == 'pt') {
ptdat <- mutate(ptdat_0, cluster_id = paste(iso3, lat, long, survey_series, year_start, sep = "_"))
} else {
ptdat <- mutate(ptdat_0, cluster_id = paste(iso3, shapefile, location_code, survey_series, year_start, sep = "_"))
}
# Create a table which assigns numbers to unique IDs and merge it back to data to have shorter
# unique IDs
short_id <- data.frame(cluster_id = unique(ptdat$cluster_id),
id_short = seq(1:length(unique(ptdat$cluster_id))),
stringsAsFactors = F)
ptdat <- as.data.frame(ptdat) #Check on why the ptdat is getting turned into a data.table
ptdat <- left_join(ptdat, short_id, by = 'cluster_id')
rm(short_id)
# Remove longer cluster_ids
ptdat <- dplyr::select(ptdat, -cluster_id)
# Change weight to 1 if collapsing point data
if (data_type == "pt" & agg_level != 'country') {ptdat$hhweight <- 1}
# Change shapefile and location code to missing if collapsing point data
if (data_type == "pt") {ptdat$shapefile <- NA; ptdat$location_code <- NA}
#### Define Indicator ####
message("Defining Indicator...")
ptdat <- as.data.frame(ptdat) ### Check on why the ptdat is turning into a data.table-causing left_join in define_indi to break
ptdat <- define_indi()
message("Addressing Missingness...")
ptdat <- rm_miss()
miss_wts <- unique(ptdat$id_short[which(is.na(ptdat$hhweight))])
ptdat <- filter(ptdat, !(id_short %in% miss_wts))
invalid_hhs <- unique(ptdat$id_short[which(ptdat$hh_size <= 0)])
ptdat <- filter(ptdat, !(id_short %in% invalid_hhs))
message("Crosswalking HH Sizes...")
data = ptdat
var_family = indi_fam
library(dplyr)
# Remove all missing hh_size obs
data <- filter(data, !is.na(hh_size))
# Duplicate data into reference and comparison sets with dummy encoding
data_1 <- data %>% mutate(cw = 1)
data_2 <- data %>% mutate(cw = 0)
data_2$hh_size <- 1
data_2$id_short <- data_2$id_short + max(data_1$id_short)
data <- rbind(data_1, data_2)
if (var_family == 'water') {
data <- rename(data, indi = piped) }
head(data)
data <- data %>% mutate(wt_indi = hhweight*indi*hh_size, wt_denom = hhweight*hh_size) %>%
group_by(id_short, cw) %>%
summarize(wtavg_indi = sum(wt_indi, na.rm = T)/sum(wt_denom, na.rm = T),
total_hh = sum(hh_size))
head(data)
model <- glm(data = data, formula = wtavg_indi ~ cw, family = binomial(link = 'logit'),
weights = data$total_hh)
ratio <- model$coefficients['cw']
ratio
ratio <- exp(ratio)
ratio
data = ptdat
if (length(data[which(is.na(data$hh_size)),1]) < 1) {
print("No missing hh_sizes!")
return(data)
}
library(dplyr)
# Split data into urban and rural
urban <- filter(data, urban == 1)
rural <- filter(data, urban == 0)
overall <- data
u_ratio <- cw(urban)
r_ratio <- cw(rural)
o_ratio <- cw(overall)
results <- data.frame(urban = c(1,0,2), ratio = c(u_ratio,r_ratio,o_ratio))
data$hh_size[which(is.na(data$hh_size) &
data$urban == 1)] <- u_ratio
data$hh_size[which(is.na(data$hh_size) &
data$urban == 0)] <- r_ratio
data$hh_size[which(is.na(data$hh_size) &
is.na(data$urban))] <- o_ratio
head(data)
ptdat <- hh_cw(data = ptdat)
model
View(results)
data <- filter(data, !is.na(hh_size))
# Duplicate data into reference and comparison sets with dummy encoding
data_1 <- data %>% mutate(cw = 1)
data_2 <- data %>% mutate(cw = 0)
data_2$hh_size <- 1
data_2$id_short <- data_2$id_short + max(data_1$id_short)
data <- rbind(data_1, data_2)
if (var_family == 'water') {
data <- rename(data, indi = piped) }
if (var_family == 'sani') {
data <- rename(data, indi = od) }
# Aggregate data into clusters
data <- data %>% mutate(wt_indi = hhweight*indi*hh_size, wt_denom = hhweight*hh_size) %>%
group_by(id_short, cw) %>%
summarize(wtavg_indi = sum(wt_indi, na.rm = T)/sum(wt_denom, na.rm = T),
total_hh = sum(hh_size))
summary(data$wtavg_indi)
ptdat2 <- impute_indi()
source("J:/DATA/SHAPE_FILES/GBD_geographies/master/GBD_2015/inset_maps/noSubs/GBD_WITH_INSETS_MAPPING_FUNCTION.r")
